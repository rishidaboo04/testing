import camelot
import pandas as pd
import pdfplumber

# Function to extract section from PDF
def extract_section_from_pdf(pdf_path, title, stop_keywords=None):
    with pdfplumber.open(pdf_path) as pdf:
        full_text = ""
        
        # Extract text from all pages
        for page in pdf.pages:
            full_text += page.extract_text()
    
    # If the title isn't found, return None
    start_index = full_text.find(title)
    if start_index == -1:
        return None
    
    # Extract the section after the title
    section_text = full_text[start_index:]
    
    # Stop when we find the next section or end of the document
    stop_keywords = stop_keywords or []
    next_section_start = len(section_text)
    
    # Search for the next section titles (stop keywords) and get the minimum index
    for keyword in stop_keywords:
        stop_index = section_text.find(keyword)
        if stop_index != -1 and stop_index < next_section_start:
            next_section_start = stop_index
    
    # Cut the text to only include the desired section
    section_text = section_text[:next_section_start].strip()

    return section_text

# Function to replace bullet points with dashes
def replace_bullets_with_dashes(text):
    return text.replace('●', '-')  # Replace bullet points with dash

# Add spaces between sections and replace bullet points with dashes
def add_space_between_sections(*sections):
    sections_with_dashes = [replace_bullets_with_dashes(section if section else "Not Found") for section in sections]
    return "\n\n".join(sections_with_dashes)

# Paths to PDF
pdf_path = 'Test_Job_Profile.pdf'

# Extract sections from the PDF
job_purpose = extract_section_from_pdf(pdf_path, "Job Purpose:", stop_keywords=["Key Accountabilities", "Key Responsibilities"])
key_accountabilities = extract_section_from_pdf(pdf_path, "Key Accountabilities:", stop_keywords=["Key Responsibilities"])
key_responsibilities = extract_section_from_pdf(pdf_path, "Key Responsibilities:", stop_keywords=["Skills", "Qualifications"])

# Generate the section outputs with spaces between them and replace bullets with dashes
output = add_space_between_sections(job_purpose, key_accountabilities, key_responsibilities)

# Specify the path to your PDF file for table extraction
tables_output = ""

# Use camelot to read tables from the PDF
tables = camelot.read_pdf(pdf_path, pages='all')  # 'all' specifies all pages

# ------------------------FIRST TABLE------------------------------
df = tables[0].df

# Iterate through the rows and print Column 0 paired with Column 1 and Column 2 paired with Column 3
for i in range(len(df)):
    # Clean up multiline text in columns by replacing '\n' with a space
    col_0 = df.iloc[i, 0].replace('\n', ' ') if df.iloc[i, 0] else ''
    col_1 = df.iloc[i, 1].replace('\n', ' ') if df.iloc[i, 1] else ''
    
    # Print Column 0 paired with Column 1 (without the dash)
    if col_0 and col_1:
        tables_output += f"{col_0} {col_1}\n"
    
    # Print Column 2 paired with Column 3 (if the columns exist)
    if len(df.columns) > 2:
        col_2 = df.iloc[i, 2].replace('\n', ' ') if df.iloc[i, 2] else ''
        col_3 = df.iloc[i, 3].replace('\n', ' ') if df.iloc[i, 3] else ''
        if col_2 and col_3:
            tables_output += f"{col_2} {col_3}\n"

# -----------------------SECOND/THIRD TABLE-------------------------------
df2 = tables[1].df
df3 = tables[2].df

# Combine both DataFrames (concatenate df2 and df3)
combined_df = pd.concat([df2, df3], ignore_index=True)

# Iterate through the rows of the combined DataFrame
for i in range(1, len(combined_df)):  # Starting from row 1 to skip header row
    criterion = combined_df.iloc[i, 0]
    essential = combined_df.iloc[i, 1]
    desirable = combined_df.iloc[i, 2]

    # Clean up text by replacing '\n' with a space
    criterion = criterion.replace('\n', ' ') if criterion else None
    essential = essential.replace('\n', ' ') if essential else None
    desirable = desirable.replace('\n', ' ') if desirable else None

    # Print in bullet-point format
    if criterion:
        tables_output += f"{criterion.lstrip('-').strip()}:\n"
        
        if essential:
            essential_points = essential.split('●')
            tables_output += "  - Essential:\n"
            for point in essential_points:
                if point.strip():
                    tables_output += f"    - {point.strip()}\n"
        
        if desirable:
            desirable_points = desirable.split('●')
            tables_output += "  - Desirable:\n"
            for point in desirable_points:
                if point.strip():
                    tables_output += f"    - {point.strip()}\n"

# ---------------------LAST TABLE (No Bullet Points or Extra Colons)-------------------------------
df4 = tables[3].df

# Iterate through the rows and pair columns
for i in range(len(df4)):
    if len(df4.columns) > 1:
        col_0 = df4.iloc[i, 0].replace('\n', ' ').strip() if df4.iloc[i, 0] else None
        col_1 = df4.iloc[i, 1].replace('\n', ' ').strip() if df4.iloc[i, 1] else None
        
        if col_0 and col_1:
            col_1 = col_1.lstrip('●').strip()
            col_0 = col_0.rstrip(':')
            tables_output += f"{col_0}: {col_1}\n"

    if len(df4.columns) > 3:
        col_2 = df4.iloc[i, 2].replace('\n', ' ').strip() if df4.iloc[i, 2] else None
        col_3 = df4.iloc[i, 3].replace('\n', ' ').strip() if df4.iloc[i, 3] else None
        
        if col_2 and col_3:
            col_3 = col_3.lstrip('●').strip()
            col_2 = col_2.rstrip(':')
            tables_output += f"{col_2}: {col_3}\n"

# Combine all the outputs
final_output = output + "\n\n" + tables_output

# Save the combined output to a text file
output_file_path = 'combined_output.txt'
with open(output_file_path, 'w') as file:
    file.write(final_output)

print(f"Output saved to {output_file_path}")
