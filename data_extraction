import camelot
import pandas as pd
import pdfplumber

def extract_section_from_pdf(pdf_path, title, stop_keywords=None):
    with pdfplumber.open(pdf_path) as pdf:
        full_text = ""
        for page in pdf.pages:
            full_text += page.extract_text()

    start_index = full_text.find(title)
    if start_index == -1:
        return None

    section_text = full_text[start_index:]
    stop_keywords = stop_keywords or []
    next_section_start = len(section_text)

    for keyword in stop_keywords:
        stop_index = section_text.find(keyword)
        if stop_index != -1 and stop_index < next_section_start:
            next_section_start = stop_index

    return section_text[:next_section_start].strip()

def replace_bullets_with_dashes(text):
    return text.replace('●', '-')

def add_space_between_sections(*sections):
    sections_with_dashes = [replace_bullets_with_dashes(section if section else "Not Found") for section in sections]
    return "\n\n".join(sections_with_dashes)

# Paths to PDF
pdf_path = 'Test_Job_Profile.pdf'

# Extract sections
job_purpose = extract_section_from_pdf(pdf_path, "Job Purpose:", stop_keywords=["Key Accountabilities", "Key Responsibilities"])
key_accountabilities = extract_section_from_pdf(pdf_path, "Key Accountabilities:", stop_keywords=["Key Responsibilities"])
key_responsibilities = extract_section_from_pdf(pdf_path, "Key Responsibilities:", stop_keywords=["Skills", "Qualifications"])

# Print sections with formatted output
output = add_space_between_sections(job_purpose, key_accountabilities, key_responsibilities)
print(output)
print("\n")

# Use camelot to read tables from the PDF
tables = camelot.read_pdf(pdf_path, pages='all')

# ------------------------FIRST TABLE------------------------------
if len(tables) > 0:
    df_first = tables[0].df
    print("First Table:")
    for i in range(len(df_first)):
        col_0 = df_first.iloc[i, 0].replace('\n', ' ') if df_first.iloc[i, 0] else ''
        col_1 = df_first.iloc[i, 1].replace('\n', ' ') if df_first.iloc[i, 1] else ''

        if col_0 and col_1:
            print(f"{col_0} {col_1}")

        if len(df_first.columns) > 2:
            col_2 = df_first.iloc[i, 2].replace('\n', ' ') if df_first.iloc[i, 2] else ''
            col_3 = df_first.iloc[i, 3].replace('\n', ' ') if df_first.iloc[i, 3] else ''
            if col_2 and col_3:
                print(f"{col_2} {col_3}")

# ------------------------MIDDLE TABLES------------------------------
middle_tables = tables[1:-1] if len(tables) > 2 else []

for idx, table in enumerate(middle_tables, start=1):
    df_middle = table.df
    print(f"Middle Table {idx}:")
    for i in range(1, len(df_middle)):  # Skip the header row
        criterion = df_middle.iloc[i, 0] if len(df_middle.columns) > 0 else None
        essential = df_middle.iloc[i, 1] if len(df_middle.columns) > 1 else None
        desirable = df_middle.iloc[i, 2] if len(df_middle.columns) > 2 else None

        criterion = criterion.replace('\n', ' ') if criterion else None
        essential = essential.replace('\n', ' ') if essential else None
        desirable = desirable.replace('\n', ' ') if desirable else None

        if criterion:
            print(f"{criterion.lstrip('-').strip()}:")
            
            if essential:
                essential_points = essential.split('●')
                print("  - Essential:")
                for point in essential_points:
                    if point.strip():
                        print(f"    - {point.strip()}")
            
            if desirable:
                desirable_points = desirable.split('●')
                print("  - Desirable:")
                for point in desirable_points:
                    if point.strip():
                        print(f"    - {point.strip()}")

# ---------------------LAST TABLE-------------------------------
if len(tables) > 1:
    df_last = tables[-1].df
    print("Last Table:")
    for i in range(len(df_last)):
        if len(df_last.columns) > 1:
            col_0 = df_last.iloc[i, 0].replace('\n', ' ').strip() if pd.notna(df_last.iloc[i, 0]) else None
            col_1 = df_last.iloc[i, 1].replace('\n', ' ').strip() if pd.notna(df_last.iloc[i, 1]) else None
            
            if col_0 and col_1:
                col_1 = col_1.lstrip('●').strip()
                col_0 = col_0.rstrip(':')
                print(f"{col_0}: {col_1}")

        if len(df_last.columns) > 3:
            col_2 = df_last.iloc[i, 2].replace('\n', ' ').strip() if pd.notna(df_last.iloc[i, 2]) else None
            col_3 = df_last.iloc[i, 3].replace('\n', ' ').strip() if pd.notna(df_last.iloc[i, 3]) else None
            
            if col_2 and col_3:
                col_3 = col_3.lstrip('●').strip()
                col_2 = col_2.rstrip(':')
                print(f"{col_2}: {col_3}")

